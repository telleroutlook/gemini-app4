// Build stage with multi-platform support
FROM node:20-alpine AS base
WORKDIR /app

# Install security updates
RUN apk update && apk upgrade && \
    apk add --no-cache libc6-compat curl && \
    rm -rf /var/cache/apk/*

# Dependencies stage
FROM base AS dependencies
COPY package*.json ./
RUN npm ci --omit=dev --audit=false

# Development dependencies stage
FROM base AS dev-dependencies
COPY package*.json ./
RUN npm ci --audit=false

# Build stage
FROM dev-dependencies AS builder
COPY . .

# Build optimizations
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=4096"

RUN npm run build && \
    npm run build:analyze || true

# Production runtime stage
FROM nginx:1.25-alpine AS runtime

# Install curl for health checks and security updates
RUN apk update && apk upgrade && \
    apk add --no-cache curl && \
    rm -rf /var/cache/apk/*

# Copy optimized nginx config
COPY nginx.conf /etc/nginx/nginx.conf

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy additional config files
COPY _headers /usr/share/nginx/html/_headers
COPY _redirects /usr/share/nginx/html/_redirects

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nginx -u 1001 -G nodejs

# Set proper permissions
RUN chown -R nginx:nodejs /usr/share/nginx/html && \
    chown -R nginx:nodejs /var/cache/nginx && \
    chown -R nginx:nodejs /var/log/nginx && \
    chown -R nginx:nodejs /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nginx:nodejs /var/run/nginx.pid

# Security: remove unnecessary packages
RUN apk del --no-cache && \
    rm -rf /tmp/* /var/tmp/*

# Switch to non-root user
USER nginx

# Expose port
EXPOSE 8080

# Enhanced health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Labels for metadata
LABEL org.opencontainers.image.title="Gemini Chat Application" \
      org.opencontainers.image.description="Modern AI chat interface with Google Gemini" \
      org.opencontainers.image.version="2.0.0" \
      org.opencontainers.image.created="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"

# Start nginx with proper error handling
CMD ["nginx", "-g", "daemon off;"]